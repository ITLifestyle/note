------ js复习 ------
数据类型
	Null
		typeof null -> object
	Undefined

数据类型转换
	数字 -> boolean
		o,NaN为false,其他的为true
	字符串 -> boolean
		空字符为false,其他的为true
	对象 -> booelan
		null,undefine为false,其他的为true

对象
	内建对象 - es标准定义的对象
	宿主对象 - 由js的运行环境提供的对象,常见的有浏览器
		eg : console,document,Bom,Dom
	自定义对象 - 开发人员创建的对象
		创建对象
			new ObjectName();
			{} - 对象字面量
		添加属性和方法
			obejct.<attrName> = value;
			object[<attrName>] = value; - attrName可以是任何的字符串,灵活,就想是键值对
		获取属性值
			object.<attrName>
			object[<attrName>]
		删除属性
			delete obj.<attrName>
	创建对象方式
		直接声明
		工厂 - 声明的对象都是object类型的
		构造函数
			eg : function Person(){}
	原型对象(prototype) - 当函数以构造函数执行时,它所创建的每一个对象都含有一个隐藏的属性; 相当于java中的父类
		查看
			objName.__proto__
			className.prototype

运算符
	in - 检测对象是否含有某一个属性; 对象中没有会去原型中找
		"属性名" in obj
		-- obj.hasOwnProperty("properName"); 仅仅检查对象不会检查原型中的属性是否存在 

隐藏参数
	this - 由浏览器创建
		根据调用方式的不同,this的指向不一样

垃圾回收(GC)

数组操作
	slice(start[, end]) - 从数组中返回指定元素; 不影响原数组
		参数
			end : 省略,从开始索引截取到最后
			- 负值表示从后往前数
	splice(start, mount[, item...]); - 删除并插入元素; 影响原素组
		参数
			item : 在删除位置插入的元素

高阶函数
	call(obj[, args...]) & apply(obj[, paramArray]) 
		- 调用时可以将一个对象指定为第一个参数, 此时这个对象将会成为该函数的this
		call() : 实参可以在对象后依次定义
		apply() : 将实参封装到一个数组中统一传递


------ ES6 ------
变量
	let
		特性
			1. 不能重复说明
			2. 可修改
			3. 块级作用域
	const
		特性
			1. 不能重复说明
			2. 不可修改
			3. 块级作用域

箭头函数
	格式
		() => {}
	特性
		1. 一个参数的时候可以省略()
		2. 只有一个return可以省略{}
	this 指向问题
		1. 箭头函数的this不能用call()或者apply()进行绑定
 		2. 箭头函数的 this 永远指向该函数构造时的环境

 函数参数
 	扩展/展开
 		...args : 收集参数, 要放到参数列表的最后
 		...arr : 展开数组
 			...[1,2,3] = 1,2,3
 	默认参数
 		function(a = defaltValue);

解构赋值
	条件
		1. 左右两边的结构一样
		2. 必须符合语法
		3. 声明和赋值不能分开
	eg
		let [a, b, c] = [1, 2, 3];
		let [a, b, c] = {a:1, b:2, c:3}

------ ES7 ------